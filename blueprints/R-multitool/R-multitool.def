BootStrap: library
From: ubuntu:sha256.cb37e547a14249943c5a3ee5786502f8db41384deb83fa6d2b62f3c587b82b17

%files
  install-R-packages.sh /opt/install-R-packages.sh
  renv.source /opt/renv.source
  renv.lock /opt/renv.lock
  bootstrap-environment.R /opt/bootstrap-environment.R
  BTR.source /opt/BTR.source

%post
  echo "deb http://us.archive.ubuntu.com/ubuntu focal universe" >> /etc/apt/sources.list
  apt-get update
  apt install -y wget git r-base=3.6.3-2

  # We will construct the environment in `/opt`. Ultimately, it will contain
  # an `renv` environment containing all R dependencies and all tools that can
  # be installed directly from CRAN (or bioconductor if really necessary).
  # Then we will manually install BTR, GENIE3-R, SCODE-R SINCERITIES-R.
  cd /opt

  # Install renv, setup the environment and install packages into it:
  ./install-R-packages.sh <renv.source
  if [ -f "/opt/renv.lock" ]; then
    # This is the default case and will construct the environment with all
    # package versions pinned, as declared in `renv.lock`.
    RENV_PATHS_ROOT=/opt/renv_root R \
      --vanilla \
      --quiet \
      -e "renv::consent(provided = TRUE); renv::init(bare = TRUE); renv::restore();"
    # ^ We need to call `renv::init` before `renv::restore` so that `renv`
    # writes its activation machinery to `/opt`. If we didn't do this here,
    # `renv` would try to do it later when `renv::activate` is called from
    # (our custom) `Rprofile` at container runtime, at which point `/opt` is
    # already frozen.
  else
    # To update or change the environment, run the build without `renv.lock`
    # in the container -- e.g. by commenting out the respective line in the
    # `%files` section -- to cause the following command to run. It will
    # recreate `renv.lock`, which you can then extract from the container and
    # commit to this repository.
    RENV_PATHS_ROOT=/opt/renv_root R \
      --vanilla \
      --quiet \
      -f bootstrap-environment.R
  fi
  echo 'renv::activate("/opt")' >Rprofile

  # Install BTR (which has been removed from CRAN):
  ./install-R-packages.sh <BTR.source

  # Install GENIE3 (R variant):
  git clone https://github.com/vahuynh/GENIE3
  cd GENIE3
  git checkout 2ad51d202467f699eca7a61d7690b6a8e3d12cc6
  # ^ This repository has no tagged versions
  #
  # NOTE: The GENIE3_R_C_wrapper component has apparently been superseded by
  #   `https://github.com/aertslab/GENIE3`, though we're not completely sure
  #   which of them really is the canonical version since the changes have
  #   been largely cosmetic. For now we will install that other GENIE3 as a
  #   package (through `renv.lock`). In case we need the version from
  #   `https://github.com/vahuynh/GENIE3` after all, I will leave the
  #   following in here for now:
  #
  #    cd GENIE3_R_C_wrapper
  #    R CMD SHLIB GENIE3.c
  #    # Unfortunately, (a) GENIE3.R contains a local reference to `GENIE3.so`
  #    # and (b) R does not honor the standard `dlopen` lookup paths for
  #    # `dyn.load`, so we cannot just set `LD_LIBRARY_PATH` to have the
  #    # shared object be picked up. To ensure we can run GENIE3 from any
  #    # working directory, we will patch the source to make the `.so`
  #    # reference absolute.
  #    patch < /opt/GENIE3-RC.patch
  cd /opt
  ln -s GENIE3/GENIE3_R GENIE3_R

  # Install SCODE-R:
  git clone https://github.com/hmatsu1226/SCODE
  # NOTE: The repository also contains a Julia version, which will not be
  #   setup in this image. It also contains simple Ruby helper scripts to run
  #   SCODE multiple times and average the results. These will also not be
  #   setup here. I would like to avoid the additional complexity of deploying
  #   Ruby (either here or in another container) just for this trivial
  #   functionality; if we really need it, we should likely replicate it
  #   directly in the pipeline glue.
  cd SCODE
  git checkout d481cd807b9b44e8148d540cdac15cbcae159478
  # ^ This repository has no tagged versions
  cd /opt

  # Install SINCERITIES-R:
  wget -O /tmp/SINCERITIES-R.zip https://github.com/CABSEL/SINCERITIES/raw/bb264256c70e6a38a0550eb37159707105d0d0f3/SINCERITIES-R_v2.0.zip
  # ...yes, you read that right. This is a zipfile containing the source code,
  # committed verbatim into the repository. It also incidentally contains a
  # bunch of crap like `__MACOSX`, `.DS_Store` files and so on, so we will
  # only pluck R source code and CSV data from it.
  echo "d93307e0dbbd8f87d30e263578efd2cecfaf6583aa6889b67b6cb0a0dbe1690f  /tmp/SINCERITIES-R.zip" | sha256sum -c
  unzip /tmp/SINCERITIES-R.zip "SINCERITIES-R v2.0/*.R" "SINCERITIES-R v2.0/*.csv"
  mv "SINCERITIES-R v2.0" SINCERITIES
  # SINCERITIES-R is currently untested because I find its documentation
  # mostly unreadable and I didn't see any examples. If you want to use it, go
  # ahead, but you may need to fix this build.

%environment
  export LC_ALL=C
  export RENV_PATHS_ROOT=/opt/renv_root
  export R_PROFILE_USER=/opt/Rprofile

%runscript
  R --no-save --no-restore --quiet "$@"
